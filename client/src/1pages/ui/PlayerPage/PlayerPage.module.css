.player {
  min-width: 500px;
  background-color: bisque;
  color: black;
}
.wrap {
  margin: 20px;
}
.attributes {
  margin: 20px;
  display: flex;
  gap: 20px;
}
.icon {
  width: 50px;
  height: 50px;
}

.stats_wrap {
  display: flex;
  flex-wrap: wrap;
  gap: 35px;
  padding: 30px;
}
.stats {
  display: flex;
  gap: 10px;
}
.stats:hover .info {
  opacity: 1;
}
.stats:hover .info:before {
  content: '';
  position: absolute;
  top: calc(100% + 10px);
  left: calc(100% + 10px);
}
.text {
  font-size: 20px;
  margin: auto;
  color: brown;
}
.info {
  position: absolute;
  margin: 40px;
  opacity: 0;
  background-color: rgba(0, 0, 0, 0.5);
  color: white;
  padding: 5px 10px;
  border-radius: 5px;
  transition: opacity 0.3s;
}
/* const statsIcon: { [key: string]: string } = {
    MAXIMUM_HIT_POINTS: MaxHitPoints,
    MAXIMUM_ACTION_POINTS: MaxActionPoints,
    ARMOR_CLASS: ArmorClass,
    MELEE_DAMAGE: MeleeDamage,
    CARRY_WEIGHT: CarryWeight,
    SEQUENCE: Sequence,
    HEALING_RATE: HealingRate,
    CRITICAL_CHANCE: CriticalChance,
    RADIATION_RESISTANCE: RadiationResistance,
    AGE: Age,
    GENDER: Gender,
    CURRENT_HIT_POINTS: CurrentHitPoins,
    CURRENT_RADIATION_LEVEL: CurrentRadiationLevel,
    CURRENT_ACTION_POINTS: CurrentActionPoint,
    UNSPENT_SKILL_POINTS: UnspentSkillPoint,
    LEVEL: Level,
    EXPERIENCE: Experience,
    REPUTATION: Reputation,
    KARMA: Karma,
    FATIQUE: Fatique,
  }; */

/*  <div className={style.statsWrap}>
        {player.attributes.map(
          (attr: { name: string; value: number }, index: number) => (
            <div className={style.stats} key={index}>
              {statsIcon[attr.name] && (
                <img
                  className={style.icon2}
                  src={statsIcon[attr.name]}
                  alt={attr.name}
                />
              )}
              <p>{attr.value}</p>
            </div>
          )
        )}
      </div> */
